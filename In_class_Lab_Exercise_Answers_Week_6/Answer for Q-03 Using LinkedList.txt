// Using LinkedList

#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
};

class Stack {
private:
    Node* top;

public:
    Stack() {
        top = nullptr;
    }

    void push(int x) {
        Node* newNode = new Node;
        newNode->data = x;
        newNode->next = top;
        top = newNode;
    }

    int pop() {
        if (isEmpty()) {
            cout << "Stack is Empty!" << endl;
            return -1;
        }
        Node* temp = top;
        int x = top->data;
        top = top->next;
        delete temp;
        return x;
    }

    bool isEmpty() {
        return top == nullptr;
    }

    int stackTop() {
        if (isEmpty()) {
            cout << "Stack is Empty!" << endl;
            return -1;
        }
        return top->data;
    }

    void display() {
        Node* p = top;
        while (p != nullptr) {
            cout << p->data << " ";
            p = p->next;
        }
        cout << endl;
    }
};

int main() {
    Stack stk;

    // Push
    stk.push(8);
    stk.push(10);
    stk.push(5);
    stk.push(11);
    stk.push(15);
    stk.push(23);
    stk.push(6);
    stk.push(18);
    stk.push(20);
    stk.push(17);

    // Display
    stk.display();

    // Pop x5
    for (int i = 0; i < 5; i++) {
        stk.pop();
    }

    // Display
    stk.display();

    // Push
    stk.push(4);
    stk.push(30);
    stk.push(3);
    stk.push(1);

    // Display
    stk.display();

    return 0;
}
